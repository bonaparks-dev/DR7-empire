const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { createClient } = require('@supabase/supabase-js');
const { Resend } = require('resend');
const PDFDocument = require('pdfkit');
const QRCode = require('qrcode');
const crypto =require('crypto');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);
const resend = new Resend(process.env.RESEND_API_KEY);
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
const hmacSecret = process.env.HMAC_SECRET_KEY;

// Helper to create HMAC hash
const createHmac = (data) => {
  return crypto.createHmac('sha256', hmacSecret).update(JSON.stringify(data)).digest('hex');
};

// Helper to generate PDF
const generateVoucherPDF = async (voucherData) => {
  const doc = new PDFDocument({ size: 'A6', margin: 40 });
  const buffers = [];
  doc.on('data', buffers.push.bind(buffers));

  // QR Code Generation
  const qrPayload = JSON.stringify(voucherData);
  const qrCodeImage = await QRCode.toDataURL(qrPayload, { errorCorrectionLevel: 'H' });

  // PDF Content
  doc.font('Helvetica-Bold').fontSize(20).text('DR7 Gift Card', { align: 'center' });
  doc.moveDown(0.5);
  doc.font('Helvetica').fontSize(12).text(`Value: €${voucherData.value / 100}`, { align: 'center' });

  doc.moveDown(2);
  doc.font('Helvetica-Bold').fontSize(16).text(voucherData.code, { align: 'center' });

  doc.moveDown(2);
  doc.image(qrCodeImage, { fit: [150, 150], align: 'center' });

  doc.moveDown(2);
  doc.fontSize(8).text(`Valid from: ${new Date(voucherData.valid_from).toLocaleDateString()}`, { align: 'left' });
  doc.fontSize(8).text(`Expires: ${new Date(voucherData.expiry).toLocaleDateString()}`, { align: 'left' });
  doc.fontSize(8).text(`Email: ${voucherData.email}`, { align: 'left' });

  return new Promise((resolve) => {
    doc.on('end', () => resolve(Buffer.concat(buffers)));
    doc.end();
  });
};

// Core logic for creating and sending a voucher
const createAndSendVoucher = async ({ email, paid_cents, stripe_object_id, value_cents }) => {
  try {
    // 1. Prepare Voucher Data
    const voucherDetails = {
      email,
      value_cents: value_cents || 2500, // Default to 25 EUR
      paid_cents,
      valid_from: new Date('2025-12-26T00:00:00Z').toISOString(),
      expiry: new Date('2026-12-31T23:59:59Z').toISOString(),
      stripe_session_id: stripe_object_id, // Can be a payment intent ID or session ID
      status: 'valid'
    };

    // 2. Create HMAC hash (without the code first)
    const hmac_hash_placeholder = createHmac({ ...voucherDetails, code: "TBD" });

    // 3. Insert into Supabase (code is generated by trigger)
    const { data: newVoucher, error: insertError } = await supabase
      .from('vouchers')
      .insert({ ...voucherDetails, hmac_hash: hmac_hash_placeholder })
      .select()
      .single();

    if (insertError) throw insertError;

    // 4. Create final QR payload with the real code and hash
    const finalPayload = {
      code: newVoucher.code,
      email: newVoucher.email,
      value: newVoucher.value_cents,
      paid: newVoucher.paid_cents,
      valid_from: newVoucher.valid_from,
      expiry: newVoucher.expiry
    };
    const finalHash = createHmac(finalPayload);

    // 5. Update voucher with the final hash
    const { error: updateError } = await supabase
      .from('vouchers')
      .update({ hmac_hash: finalHash })
      .eq('id', newVoucher.id);

    if (updateError) throw updateError;

    newVoucher.hmac_hash = finalHash;

    // 6. Generate PDF
    const qrDataForPDF = { ...finalPayload, hash: finalHash };
    const pdfBuffer = await generateVoucherPDF(qrDataForPDF);
    const pdfPath = `${newVoucher.code}.pdf`;

    // 7. Upload PDF to Supabase Storage
    const { error: uploadError } = await supabase.storage
      .from('vouchers')
      .upload(pdfPath, pdfBuffer, { contentType: 'application/pdf', upsert: true });

    if (uploadError) throw uploadError;

    // 8. Get signed URL for the PDF
    const { data: urlData, error: urlError } = await supabase.storage
      .from('vouchers')
      .createSignedUrl(pdfPath, 31536000); // 1 year expiry for URL

    if (urlError) throw urlError;

    // 9. Update voucher with pdf_path
    await supabase.from('vouchers').update({ pdf_path: pdfPath }).eq('id', newVoucher.id);

    // 10. Send Email with Resend
    await resend.emails.send({
      from: 'noreply@dr7empire.com',
      to: email,
      subject: 'Your DR7 Gift Card – €25 value',
      html: `<h1>Thank you for your purchase!</h1>
             <p>Here is your gift card code: <strong>${newVoucher.code}</strong></p>
             <p>Value: €25</p>
             <p>Valid from: 26/12/2025 to 31/12/2026</p>
             <p>You can download your voucher PDF here:</p>
             <a href="${urlData.signedUrl}">Download Voucher</a>`,
    });

  } catch (error) {
    console.error('Error in createAndSendVoucher:', error);
    throw error; // Re-throw to be caught by the main handler
  }
};


exports.handler = async (event) => {
  const sig = event.headers['stripe-signature'];
  let stripeEvent;

  try {
    stripeEvent = stripe.webhooks.constructEvent(event.body, sig, webhookSecret);
  } catch (err) {
    console.error(`Webhook signature verification failed.`, err.message);
    return { statusCode: 400, body: `Webhook Error: ${err.message}` };
  }

  try {
    switch (stripeEvent.type) {
      case 'checkout.session.completed': {
        const session = stripeEvent.data.object;
        await createAndSendVoucher({
            email: session.customer_email,
            paid_cents: session.amount_total,
            stripe_object_id: session.id,
            value_cents: parseInt(session.metadata.value, 10) * 100 || 2500
        });
        break;
      }

      case 'payment_intent.succeeded': {
        const paymentIntent = stripeEvent.data.object;
        if (paymentIntent.metadata.generateVoucher === 'true') {
          await createAndSendVoucher({
              email: paymentIntent.metadata.email,
              paid_cents: paymentIntent.amount,
              stripe_object_id: paymentIntent.id,
              value_cents: parseInt(paymentIntent.metadata.voucherValue, 10) || 2500
          });
        }
        break;
      }

      default:
        console.log(`Unhandled event type ${stripeEvent.type}`);
    }
  } catch (error) {
      console.error('Error processing webhook event:', error);
      return { statusCode: 500, body: JSON.stringify({ error: 'Internal Server Error' }) };
  }

  return { statusCode: 200, body: JSON.stringify({ received: true }) };
};