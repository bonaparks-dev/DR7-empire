-- Create the table for lottery tickets
CREATE TABLE public.lottery_tickets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    draw_id BIGINT NOT NULL,
    ticket_number INTEGER NOT NULL,
    buyer_email TEXT,
    payment_intent_id TEXT NOT NULL,
    hmac_signature TEXT NOT NULL,
    locale VARCHAR(5) DEFAULT 'en' NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,

    -- Constraints
    CONSTRAINT unique_ticket_per_draw UNIQUE (draw_id, ticket_number),
    CONSTRAINT unique_payment_intent UNIQUE (payment_intent_id)
);

-- Comments for clarity
COMMENT ON TABLE public.lottery_tickets IS 'Stores individual lottery tickets for various draws.';
COMMENT ON COLUMN public.lottery_tickets.id IS 'Unique identifier for each ticket.';
COMMENT ON COLUMN public.lottery_tickets.draw_id IS 'Identifier for the specific lottery draw (e.g., 1 for the first draw).';
COMMENT ON COLUMN public.lottery_tickets.ticket_number IS 'The unique ticket number within a specific draw.';
COMMENT ON COLUMN public.lottery_tickets.buyer_email IS 'The buyer''s email, for sending the ticket.';
COMMENT ON COLUMN public.lottery_tickets.payment_intent_id IS 'Stripe Payment Intent ID to ensure idempotency.';
COMMENT ON COLUMN public.lottery_tickets.hmac_signature IS 'HMAC signature to verify ticket authenticity.';
COMMENT ON COLUMN public.lottery_tickets.locale IS 'The locale (e.g., ''en'', ''it'') for communication with the user.';
COMMENT ON COLUMN public.lottery_tickets.created_at IS 'Timestamp of when the ticket was created.';

-- Enable Row Level Security (RLS)
ALTER TABLE public.lottery_tickets ENABLE ROW LEVEL SECURITY;

-- Policies for RLS
-- Allow public read access for verification purposes (e.g., QR code scan)
CREATE POLICY "Allow public read access" ON public.lottery_tickets
FOR SELECT USING (true);

-- Restrict write access to service roles (i.e., your Netlify function)
CREATE POLICY "Allow service role to insert" ON public.lottery_tickets
FOR INSERT WITH CHECK (auth.role() = 'service_role');

CREATE POLICY "Allow service role to update" ON public.lottery_tickets
FOR UPDATE WITH CHECK (auth.role() = 'service_role');

-- Create a storage bucket for the tickets if it doesn't exist
-- Note: This is an example. In a real scenario, you'd run this command via Supabase UI or CLI.
-- For the purpose of this task, we assume the bucket 'lottery-tickets' is created.
-- We will use this bucket name in the Netlify function.
/*
INSERT INTO storage.buckets (id, name, public)
VALUES ('lottery-tickets', 'lottery-tickets', false)
ON CONFLICT (id) DO NOTHING;
*/